

# This file was *autogenerated* from the file quotient_rings.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_4 = Integer(4); _sage_const_1 = Integer(1); _sage_const_16 = Integer(16)# Nathaniel Green
# Galois theory programs 
# Fall, 2024

# variable
var('X') 

# prime number
p = _sage_const_2 
Z_p = Integers(p)
Z_pX = PolynomialRing(Z_p, 'X')

# polynomial to create our quotient ring with
f = Z_pX(X**_sage_const_4 +X+_sage_const_1 )
I = ideal(Z_pX, f)
Z_pX_f = Z_pX.quotient(I)

# element of our quotient ring
alpha = Z_pX_f(X)

def print_vals(alpha, my_range):
    print(f"printing powers of alpha = {alpha} from {min(my_range)} to {max(my_range)}")
    for i in my_range:
        print(f"alpha^{i} = {alpha**i}")


# printing powers of alpha
print("#################################")
print(f"p = {p}")
print(f"polynomial ring = Z_{p}[X]")
print(f"Ideal = <{f}>")
print(f"alpha = {alpha} + <{f}>")
print("#################################")
print_vals(alpha, range(_sage_const_1 ,_sage_const_16 ))

